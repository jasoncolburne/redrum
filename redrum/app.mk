# Copyright (C) 2010-2021, Redbeard Enterprises Ltd.
#
# Not to be used in any form without express written consent.
# All rights reserved.
#
# $Id: app.mk 28 2011-02-10 07:06:19Z jason $

SILENT ?= @

APPID   ?= $(word $(words $(subst /, ,$(subst \,/,$(shell pwd)))), $(subst /, ,$(subst \,/,$(shell pwd))))

APPROOT  ?= ..
PROJROOT ?= $(APPROOT)/..
SRCROOT  ?= $(PROJROOT)/src
PKGROOT  ?= $(PROJROOT)/pkg
BINDIR   ?= $(PROJROOT)/bin/$(RED_TARGET)/$(RED_BUILD)

SRCDIR  ?= ./src
OBJROOT ?= $(word 1,$(SRCDIR))

CPP_EXTS := .cpp .cxx .cc .C .c++

# find objects
OBJDIR     ?= $(OBJROOT)/obj/$(RED_TARGET)/$(RED_BUILD)
C_SOURCES  := $(foreach dir,$(SRCDIR),$(filter-out $(addsuffix .c,$(addprefix $(dir)/,$(EXCLUDE_OBJECTS))),$(wildcard $(dir)/*.c)))
CC_SOURCES := $(foreach dir,$(SRCDIR),$(foreach ext,$(CPP_EXTS),$(filter-out $(addsuffix $(ext),$(addprefix $(dir)/,$(EXCLUDE_OBJECTS))),$(wildcard $(dir)/*$(ext)))))
SOURCES    := $(C_SOURCES) $(CC_SOURCES)
OBJS       := $(addsuffix $O, $(addprefix $(OBJDIR)/,$(notdir $(basename $(SOURCES)))))

# finds the source file for a given object file
find_source = $(foreach dir,$(SRCDIR),$(filter $(patsubst %$O,$(dir)/%,$(notdir $(1))).%,$(SOURCES)))
# picks the compiler to use for a given source file
choose_compiler_and_flags = $(if $(filter $(suffix $(1)),$(CPP_EXTS)),$(CPP) $(CPPFLAGS),$(CC) $(CFLAGS))
# display compiler string during compilation
display_compiler = $(if $(filter $(suffix $(1)),$(CPP_EXTS)),c++ $(notdir $(1))...,cc -c $(notdir $(1))...)

# get platform specific library dependencies
RED_OS_NO_WIDTH = $(shell $(ECHO) $(RED_OS) | sed s/32$\// | sed s/64$\// )

ifneq ("$(LIBS.$(RED_OS_NO_WIDTH))","")
  LIBS += $(LIBS.$(RED_OS_NO_WIDTH))
endif


HDIRS   += $(wildcard $(SRCROOT)/*/include) $(PKGROOT)/$(RED_TARGET)/$(RED_BUILD)/include

ifeq ("$(OBJS)","")
  BINNAME :=	
else
  BINNAME := $(BINDIR)/$(APPID)$E
endif

LIBDIRS := $(PROJROOT)/lib/$(RED_TARGET)/$(RED_BUILD)
ifeq ("$(wildcard $(PKGROOT)/$(RED_TARGET)/$(RED_BUILD)/lib)","")
  LIBDIRS +=
else
  LIBDIRS += $(PKGROOT)/$(RED_TARGET)/$(RED_BUILD)/lib
endif

LIBDEPS := $(foreach lib,$(LIBS),$(foreach dir,$(LIBDIRS),$(wildcard $(dir)/$(LIBPREFIX)$(lib)$A)))

LDFLAGS += $(addprefix -L, $(LIBDIRS))
LDFLAGS += $(LD_START_GROUP)
LDFLAGS += $(addprefix -l, $(LIBS))
LDFLAGS += $(LD_END_GROUP)

CFLAGS  += $(addprefix -I, $(HDIRS))

default: prepare
	$(SILENT)$(MAKE) --no-print-directory bin

bin: $(BINNAME)
	$(SILENT)$(ECHO) -n

prepare: $(OBJDIR) $(BINDIR) $(subst $O,.d,$(OBJS))

$(OBJDIR)/%.d:
	$(SILENT)$(ECHO) "# Autogenerated dependency file - $(shell date)" > $@
	$(SILENT)$(call choose_compiler_and_flags,$(call find_source,$(subst .d,$O,$@))) -M $(call find_source,$(subst .d,$O,$@)) >> $@
	$(SILENT)$(SED_IN_PLACE) "s/^\(.*\$O\):/$(subst /,\/,$(OBJDIR))\/\1 $(subst /,\/,$@):/g" $@
  ifeq ("$(TERM)","cygwin")
	$(SILENT)$(SED_IN_PLACE) "s/\(\s\)\(.\):/\1\/cygdrive\/\2/g" $@
  endif

# pretend everything still exists
$(addsuffix /%.h,$(HDIRS) $(SRCDIR) $(TSTDIR)):
	: pretending $(@F) exists...

ifneq ("","$(wildcard $(subst $O,.d,$(OBJS)))")
  -include $(subst $O,.d,$(OBJS))
endif


unresolved: bin
	: reporting unresolved symbols in '$(BINNAME)'
	$(SILENT)$(NM) $(BINNAME) | grep " U "

print-debug: bin
	: reporting debugging symbols in '$(BINNAME)'
	$(SILENT)$(NM) -l $(BINNAME)

echo:
	$(SILENT)$(ECHO) "APPID    = $(APPID)"
	$(SILENT)$(ECHO)
	$(SILENT)$(ECHO) "CFLAGS   = $(CFLAGS)"
	$(SILENT)$(ECHO) "LDFLAGS  = $(LDFLAGS)"
	$(SILENT)$(ECHO)
	$(SILENT)$(ECHO) "OBJDIR   = $(OBJDIR)"
	$(SILENT)$(ECHO) "SRCDIR   = $(SRCDIR)"
	$(SILENT)$(ECHO)
	$(SILENT)$(ECHO) "LIBS     = $(LIBS)"
	$(SILENT)$(ECHO)
	$(SILENT)$(ECHO) "HDIRS    = $(HDIRS)"
	$(SILENT)$(ECHO) "LIBDIRS  = $(LIBDIRS)"
	$(SILENT)$(ECHO)
	$(SILENT)$(ECHO) "OBJS     = $(OBJS)"


$(BINNAME): $(OBJS) $(LIBDEPS)
	: ld $(@F)..
	$(SILENT)$(LDBIN) $^ $(LDFLAGS) -o $@
ifneq ("$(RED_BUILD)","debug")
	: strip $(@F)...
	$(SILENT)$(STRIP) $(STRIPFLAGS) $@
endif

$(OBJDIR)/%$O:
	: $(call display_compiler,$(call find_source,$@))
	$(SILENT)$(call choose_compiler_and_flags,$(call find_source,$@)) -c $(call find_source,$@) -o $@

$(OBJDIR) $(BINDIR):
	$(SILENT)$(MKDIR) -p $@

clean:
	$(SILENT)$(RM) -f $(OBJS) $(OBJDIR)/*.d

empty:
	$(SILENT)$(RM) -rf $(OBJDIR) $(BINNAME)

test:
